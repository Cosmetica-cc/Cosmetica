package com.eyezah.cosmetics.cosmetics.model;

import com.mojang.blaze3d.platform.NativeImage;
import com.mojang.blaze3d.vertex.PoseStack;
import com.mojang.blaze3d.vertex.VertexConsumer;
import net.minecraft.client.Minecraft;
import net.minecraft.client.renderer.MultiBufferSource;
import net.minecraft.client.renderer.RenderType;
import net.minecraft.client.renderer.block.model.BakedQuad;
import net.minecraft.client.renderer.block.model.BlockModel;
import net.minecraft.client.renderer.block.model.ItemTransforms;
import net.minecraft.client.renderer.texture.OverlayTexture;
import net.minecraft.client.renderer.texture.TextureAtlas;
import net.minecraft.client.renderer.texture.TextureAtlasSprite;
import net.minecraft.client.resources.model.BakedModel;
import net.minecraft.client.resources.model.BlockModelRotation;
import net.minecraft.client.resources.model.ModelBakery;
import net.minecraft.core.Direction;
import net.minecraft.resources.ResourceLocation;

import javax.annotation.Nullable;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.util.*;
import java.util.function.Supplier;

public class Models {
	private static Map<String, BakedModel> BAKED_MODELS = new HashMap<>();
	private static Map<String, BakableModel> LOADED_MODELS = new HashMap<>();
	private static final float RANDOM_NEXT_FLOAT = 0.211f; // generated by random.org. Guaranteed to be random.
	public static ModelBakery thePieShopDownTheRoad;
	public static final QueueTextureCache TEXTURE_CACHE = new QueueTextureCache(128); // reserved 0 through 127

	@Nullable
	public static BakedModel getBakedModel(BakableModel unbaked) {
		BakedModel result = BAKED_MODELS.get(unbaked.id());

		if (result == null) {
			TextureAtlasSprite sprite = TEXTURE_CACHE.getAtlasSprite(unbaked, Minecraft.getInstance().level.getGameTime());

			if (sprite != null) {
				result = unbaked.model().bake(
						thePieShopDownTheRoad,
						l -> l.texture().getNamespace().equals("minecraft") ? Minecraft.getInstance().getTextureAtlas(TextureAtlas.LOCATION_BLOCKS).apply(l.texture()) : sprite,
						BlockModelRotation.X0_Y0,
						new ResourceLocation(unbaked.id()) /*iirc this resource location is just for debugging in the case of errors*/);
			}
		}

		return result;
	}

	public static void removeBakedModel(String id) {
		BAKED_MODELS.remove(id);
	}

	/**
	 * @returns the existing or created bakable model. Will be null if there is an error creating the model
	 * @implNote used when adding the BakableModel to player data
	 */
	@Nullable
	public static BakableModel getBakableModel(String location, Supplier<byte[]> jsonGetter, Supplier<String> b64ImageGetter) {
		if (location.isEmpty()) return null;

		return LOADED_MODELS.computeIfAbsent(location, l -> {
			try (InputStream is = new ByteArrayInputStream(jsonGetter.get())) {
				BlockModel model = BlockModel.fromStream(new InputStreamReader(is, StandardCharsets.UTF_8));
				model.name = l;

				return new BakableModel(location, model, NativeImage.fromBase64(b64ImageGetter.toString().substring(22)) /*trim nonsense at the start */);
			} catch (IOException e) {
				return null;
			} catch (Exception e) {
				e.printStackTrace();
				return null;
			}
		});
	}

	public static void renderModel(BakedModel model, PoseStack stack, MultiBufferSource multiBufferSource, int packedLight) {
		stack.pushPose();
		boolean isGUI3D = model.isGui3d();
		float transformStrength = 0.25F;
		float rotation = 0.0f;
		float transform = model.getTransforms().getTransform(ItemTransforms.TransformType.GROUND).scale.y();
		stack.translate(0.0D, rotation + transformStrength * transform, 0.0D);
		float xScale = model.getTransforms().ground.scale.x();
		float yScale = model.getTransforms().ground.scale.y();
		float zScale = model.getTransforms().ground.scale.z();

		stack.pushPose();

		final ItemTransforms.TransformType transformType = ItemTransforms.TransformType.FIXED;
		int overlayTyp = OverlayTexture.NO_OVERLAY;
		// ItemRenderer#render start
		stack.pushPose();

		model.getTransforms().getTransform(transformType).apply(false, stack);
		stack.translate(-0.5D, -0.5D, -0.5D);

		RenderType renderType = RenderType.cutoutMipped(); // hopefully this is the right one
		VertexConsumer vertexConsumer4 = multiBufferSource.getBuffer(renderType);
		renderModelLists(model, packedLight, overlayTyp, stack, vertexConsumer4);

		stack.popPose();
		// ItemRenderer#render end

		stack.popPose();
		if (!isGUI3D) {
			stack.translate(0.0F * xScale, 0.0F * yScale, 0.09375F * zScale);
		}

		stack.popPose();
	}

	// vanilla code that I don't want to rewrite:

	private static void renderModelLists(BakedModel bakedModel, int packedLight, int overlayType, PoseStack poseStack, VertexConsumer vertexConsumer) {
		Random random = new Random();
		final long seed = 42L;
		Direction[] var10 = Direction.values();
		int var11 = var10.length;

		for(int var12 = 0; var12 < var11; ++var12) {
			Direction direction = var10[var12];
			random.setSeed(seed);
			renderQuadList(poseStack, vertexConsumer, bakedModel.getQuads(null, direction, random), packedLight, overlayType);
		}

		random.setSeed(seed);
		renderQuadList(poseStack, vertexConsumer, bakedModel.getQuads(null, null, random), packedLight, overlayType);
	}

	private static void renderQuadList(PoseStack poseStack, VertexConsumer vertexConsumer, List<BakedQuad> list, int i, int j) {
		PoseStack.Pose pose = poseStack.last();
		Iterator var9 = list.iterator();

		while(var9.hasNext()) {
			BakedQuad bakedQuad = (BakedQuad)var9.next();
			int k = -1;

			float f = (float)(k >> 16 & 255) / 255.0F;
			float g = (float)(k >> 8 & 255) / 255.0F;
			float h = (float)(k & 255) / 255.0F;
			vertexConsumer.putBulkData(pose, bakedQuad, f, g, h, i, j);
		}
	}
}
